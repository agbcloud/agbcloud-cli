# AgbCloud CLI Homebrew Tap 测试包分发流水线
name: AgbCloud CLI Test Package Distribution

# 自动触发条件
triggers:
  push:
    branches:
      - master
      - main

# 全局变量
variables:
  BINARY_NAME: agbcloud
  OSS_BUCKET: agbcloud-internal
  OSS_ENDPOINT: oss-cn-hangzhou.aliyuncs.com
  BREW_TAP_REPO: git@gitlab.alibaba-inc.com:InnoArchClub/homebrew-agbcloud.git

# 流水线作业定义
jobs:
  # 构建、打包、上传、部署
  build-and-deploy:
    name: 构建并部署
    runs-on: 4-16Gi
    timeout: 60m
    steps:
      - uses: checkout
      - uses: setup-env
        inputs:
          go-version: "1.23.2"
          go-mod-cache: true
          go-cache: false
      - id: build-binaries
        name: 构建多平台二进制文件
        run: |
          echo "Building for all platforms..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Building version: $VERSION"
          echo "Git commit: $GIT_COMMIT"
          make build-all
          ls -la bin/

      - id: create-packages
        name: 创建安装包
        run: |
          echo "Creating packages..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          mkdir -p packages
          
          for binary in bin/*; do
            if [[ -f "$binary" ]]; then
              filename=$(basename "$binary")
              platform_arch=${filename#agbcloud-}
              
              temp_dir=$(mktemp -d)
              cp "$binary" "$temp_dir/agbcloud"
              tar -czf "packages/agbcloud-$VERSION-$platform_arch.tar.gz" -C "$temp_dir" agbcloud
              sha256sum "packages/agbcloud-$VERSION-$platform_arch.tar.gz" > "packages/agbcloud-$VERSION-$platform_arch.tar.gz.sha256"
              rm -rf "$temp_dir"
              echo "✓ Created package: agbcloud-$VERSION-$platform_arch.tar.gz"
            fi
          done
          
          ls -la packages/

      - id: upload-to-oss
        name: 上传到 OSS
        run: |
          echo "Uploading packages to OSS..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          
          # 设置 OSS 配置变量
          export OSS_BUCKET="agbcloud-internal"
          export OSS_ENDPOINT="oss-cn-hangzhou.aliyuncs.com"
          
          # 设置 OSS 凭证
          export OSS_ACCESS_KEY_ID="${{secrets.OSS_ACCESS_KEY_ID}}"
          export OSS_ACCESS_KEY_SECRET="${{secrets.OSS_ACCESS_KEY_SECRET}}"
          
          # 调试信息 - 检查凭证长度和前缀（不泄露完整凭证）
          echo "=== OSS Credentials Debug Info ==="
          echo "OSS_ACCESS_KEY_ID length: ${#OSS_ACCESS_KEY_ID}"
          echo "OSS_ACCESS_KEY_SECRET length: ${#OSS_ACCESS_KEY_SECRET}"
          echo "OSS_ACCESS_KEY_ID prefix: ${OSS_ACCESS_KEY_ID:0:8}..."
          echo "OSS_ACCESS_KEY_SECRET prefix: ${OSS_ACCESS_KEY_SECRET:0:8}..."
          echo "OSS_ENDPOINT: $OSS_ENDPOINT"
          echo "OSS_BUCKET: $OSS_BUCKET"
          
          # 检查凭证是否设置
          if [[ -z "$OSS_ACCESS_KEY_ID" ]] || [[ -z "$OSS_ACCESS_KEY_SECRET" ]]; then
            echo "Error: OSS credentials not set in secrets"
            echo "OSS_ACCESS_KEY_ID is empty: $([ -z "$OSS_ACCESS_KEY_ID" ] && echo 'YES' || echo 'NO')"
            echo "OSS_ACCESS_KEY_SECRET is empty: $([ -z "$OSS_ACCESS_KEY_SECRET" ] && echo 'YES' || echo 'NO')"
            exit 1
          fi
          
          # 网络连接测试
          echo "=== Network Connectivity Test ==="
          echo "Testing connectivity to OSS endpoint..."
          if ping -c 3 oss-cn-hangzhou.aliyuncs.com; then
            echo "✓ Ping to OSS endpoint successful"
          else
            echo "⚠ Ping to OSS endpoint failed"
          fi
          
          if curl -I --connect-timeout 10 https://oss-cn-hangzhou.aliyuncs.com; then
            echo "✓ HTTP connection to OSS endpoint successful"
          else
            echo "⚠ HTTP connection to OSS endpoint failed"
          fi
          
          # 安装 ossutil
          if ! command -v ossutil >/dev/null 2>&1; then
            echo "Installing ossutil..."
            curl -L "https://gosspublic.alicdn.com/ossutil/1.7.19/ossutil-v1.7.19-linux-amd64.zip" -o ossutil.zip
            unzip -q ossutil.zip
            
            # 查找正确的ossutil二进制文件
            OSSUTIL_BINARY=$(find . -name "ossutil*" -type f | head -1)
            if [[ -z "$OSSUTIL_BINARY" ]]; then
              echo "Error: Failed to find ossutil binary after extraction"
              exit 1
            fi
            
            chmod +x "$OSSUTIL_BINARY"
            mv "$OSSUTIL_BINARY" /usr/local/bin/ossutil
            rm -f ossutil.zip
            rm -rf ossutil*/
            
            echo "✓ ossutil installed successfully"
          else
            echo "✓ ossutil already installed"
          fi
          
          # 配置并上传
          echo "=== OSS Configuration ==="
          echo "Configuring ossutil with verbose output..."
          
          # 使用详细模式配置ossutil
          if ossutil config --endpoint="$OSS_ENDPOINT" --access-key-id="$OSS_ACCESS_KEY_ID" --access-key-secret="$OSS_ACCESS_KEY_SECRET"; then
            echo "✓ ossutil configuration successful"
          else
            echo "✗ ossutil configuration failed"
            exit 1
          fi
          
          # 验证配置 - 使用详细模式
          echo "=== OSS Connection Test ==="
          echo "Testing connection to bucket: $OSS_BUCKET"
          
          if ossutil ls oss://$OSS_BUCKET/; then
            echo "✓ Successfully connected to OSS bucket: $OSS_BUCKET"
          else
            echo "✗ Failed to connect to OSS bucket: $OSS_BUCKET"
            echo "Attempting to diagnose the issue..."
            
            # 尝试更详细的诊断
            echo "Testing basic OSS connectivity..."
            ossutil ls oss:// || true
            
            echo "Testing bucket existence with stat command..."
            ossutil stat oss://$OSS_BUCKET/ || true
            
            echo "Checking ossutil configuration..."
            ossutil config || true
            
            exit 1
          fi
          
          echo "OSS configuration successful, uploading packages..."
          
          for package in packages/*.tar.gz packages/*.sha256; do
            if [[ -f "$package" ]]; then
              filename=$(basename "$package")
              echo "Uploading $filename..."
              
              if ossutil cp "$package" "oss://$OSS_BUCKET/agbcloud/releases/$filename" --force; then
                if ossutil set-acl "oss://$OSS_BUCKET/agbcloud/releases/$filename" public-read; then
                  echo "✓ Uploaded and set public: $filename"
                else
                  echo "⚠ Uploaded but failed to set ACL: $filename"
                fi
              else
                echo "✗ Failed to upload: $filename"
                exit 1
              fi
            fi
          done

      - id: update-homebrew-tap
        name: 更新 Homebrew Tap
        run: |
          echo "Updating Homebrew Tap..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export TIMESTAMP=$(date +%Y%m%d-%H%M)
          export SANITIZED_TIMESTAMP=$(echo "$TIMESTAMP" | tr -d '-')
          
          echo "=== SSH Key Setup ==="
          # 设置SSH密钥
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 检查SSH私钥是否设置
          if [[ -z "${{secrets.AONE_CI_DEPLOY_KEY}}" ]]; then
            echo "Error: AONE_CI_DEPLOY_KEY not set in secrets"
            exit 1
          fi
          
          # 将私钥写入文件
          echo "${{secrets.AONE_CI_DEPLOY_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 验证私钥文件（不显示内容）
          if [[ -f ~/.ssh/id_rsa ]]; then
            echo "✓ SSH private key file created"
            echo "Private key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
          else
            echo "✗ Failed to create SSH private key file"
            exit 1
          fi
          
          # 检查私钥格式并转换如果需要
          echo "Checking SSH key format..."
          KEY_HEADER=$(head -1 ~/.ssh/id_rsa)
          echo "Key header: $KEY_HEADER"
          
          if echo "$KEY_HEADER" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "Detected OpenSSH format key, converting to PEM format..."
            # 备份原始密钥
            cp ~/.ssh/id_rsa ~/.ssh/id_rsa.backup
            # 转换为PEM格式（不设置密码）
            if ssh-keygen -p -m PEM -f ~/.ssh/id_rsa -P "" -N ""; then
              echo "✓ Successfully converted key to PEM format"
              echo "New key header: $(head -1 ~/.ssh/id_rsa)"
            else
              echo "⚠ Key conversion failed, restoring original format"
              cp ~/.ssh/id_rsa.backup ~/.ssh/id_rsa
            fi
          elif echo "$KEY_HEADER" | grep -q "BEGIN RSA PRIVATE KEY\|BEGIN PRIVATE KEY"; then
            echo "✓ Key is already in PEM format"
          else
            echo "⚠ Unknown key format: $KEY_HEADER"
            echo "Proceeding with original format..."
          fi
          
          # 验证私钥语法
          if ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null 2>&1; then
            echo "✓ SSH private key syntax is valid"
          else
            echo "✗ SSH private key syntax validation failed"
            echo "Key format issue detected. Please check the private key format."
            exit 1
          fi
          
          # 创建SSH配置文件
          cat > ~/.ssh/config << EOF
          Host gitlab.alibaba-inc.com
              HostName gitlab.alibaba-inc.com
              User git
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # 启动ssh-agent并添加密钥
          eval "$(ssh-agent -s)"
          
          # 添加密钥到ssh-agent
          echo "Adding SSH key to ssh-agent..."
          if ssh-add ~/.ssh/id_rsa; then
            echo "✓ SSH key added to ssh-agent successfully"
          else
            echo "✗ Failed to add SSH key to ssh-agent"
            echo "Trying to add key with verbose output..."
            ssh-add -v ~/.ssh/id_rsa || true
          fi
          
          # 列出ssh-agent中的密钥
          echo "Keys in ssh-agent:"
          ssh-add -l || echo "No keys in ssh-agent"
          
          # 测试SSH连接
          echo "Testing SSH connection to GitLab..."
          echo "Using verbose SSH connection test..."
          
          # 使用verbose模式测试连接
          if ssh -v -T git@gitlab.alibaba-inc.com 2>&1 | tee /tmp/ssh_test.log; then
            echo "✓ SSH connection successful"
          else
            SSH_EXIT_CODE=$?
            echo "SSH connection test exit code: $SSH_EXIT_CODE"
            
            # 检查是否是GitLab的正常响应
            if grep -q "Welcome to GitLab" /tmp/ssh_test.log || grep -q "successfully authenticated" /tmp/ssh_test.log; then
              echo "✓ SSH authentication successful (GitLab connection confirmed)"
            else
              echo "✗ SSH connection failed"
              echo "SSH test log:"
              cat /tmp/ssh_test.log
              exit 1
            fi
          fi
          
          echo "=== Homebrew Tap Update Debug Info ==="
          echo "VERSION: $VERSION"
          echo "GIT_COMMIT: $GIT_COMMIT"
          echo "TIMESTAMP: $TIMESTAMP"
          echo "SANITIZED_TIMESTAMP: $SANITIZED_TIMESTAMP"
          echo "Current directory: $(pwd)"
          echo "Available packages:"
          ls -la packages/ || echo "No packages directory found"
          
          # 设置 Homebrew Tap 仓库地址
          export BREW_TAP_REPO="git@gitlab.alibaba-inc.com:InnoArchClub/homebrew-agbcloud.git"
          
          # 克隆 tap 仓库
          echo "=== Git Repository Clone ==="
          echo "Cloning Homebrew Tap repository: $BREW_TAP_REPO"
          
          if git clone "$BREW_TAP_REPO" homebrew-agbcloud; then
            echo "✓ Successfully cloned tap repository via SSH"
          else
            echo "✗ Failed to clone tap repository via SSH"
            echo "SSH key setup may have failed or repository access denied"
            exit 1
          fi
          
          cd homebrew-agbcloud
          
          # 检查当前分支
          echo "Current branch: $(git branch --show-current)"
          echo "Available branches:"
          git branch -a
          
          # 配置 git
          git config user.name "Aone CICD Bot"
          git config user.email "cicd@alibaba-inc.com"
          
          # 获取 SHA256 值
          get_sha256() {
              local platform_arch=$1
              local sha256_file="../packages/agbcloud-$VERSION-$platform_arch.tar.gz.sha256"
              if [[ -f "$sha256_file" ]]; then
                  cut -d' ' -f1 "$sha256_file"
              else
                  echo "MISSING_SHA256"
              fi
          }
          
          DARWIN_AMD64_SHA256=$(get_sha256 "darwin-amd64")
          DARWIN_ARM64_SHA256=$(get_sha256 "darwin-arm64")
          LINUX_AMD64_SHA256=$(get_sha256 "linux-amd64")
          LINUX_ARM64_SHA256=$(get_sha256 "linux-arm64")
          
          # 生成 Formula
          echo "Creating Formula directory if it doesn't exist..."
          mkdir -p Formula
          
          FORMULA_FILE="Formula/agbcloud@dev-$TIMESTAMP.rb"
          echo "Creating Formula file: $FORMULA_FILE"
          
          cat > "$FORMULA_FILE" << EOF
          class AgbcloudAT${SANITIZED_TIMESTAMP} < Formula
            desc "AgbCloud CLI - Test Build $TIMESTAMP"
            homepage "https://alibaba-inc.com/agbcloud"
            version "$VERSION"
          
            if OS.mac?
              if Hardware::CPU.arm?
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-darwin-arm64.tar.gz"
                sha256 "$DARWIN_ARM64_SHA256"
              else
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-darwin-amd64.tar.gz"
                sha256 "$DARWIN_AMD64_SHA256"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-linux-arm64.tar.gz"
                sha256 "$LINUX_ARM64_SHA256"
              else
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-linux-amd64.tar.gz"
                sha256 "$LINUX_AMD64_SHA256"
              end
            end
          
            def install
              bin.install "agbcloud"
            end
          
            test do
              system "#{bin}/agbcloud", "version"
            end
          
            def caveats
              <<~EOS
                This is a test build of AgbCloud CLI.
                Build timestamp: $TIMESTAMP
                Git commit: $GIT_COMMIT
                
                To switch between versions:
                  brew unlink agbcloud@${SANITIZED_TIMESTAMP}
                  brew link agbcloud@other-version
              EOS
            end
          end
          EOF
          
          # 提交更改
          echo "Adding Formula file to git..."
          git add "$FORMULA_FILE"
          
          echo "Committing changes..."
          git commit -m "Add test build agbcloud@dev-$TIMESTAMP

          Version: $VERSION
          Git commit: $GIT_COMMIT
          Build timestamp: $TIMESTAMP"
          
          # 检查当前分支并推送
          echo "=== Git Push ==="
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch: $CURRENT_BRANCH"
          echo "Remote URL: $(git remote get-url origin)"
          
          # 确保使用SSH URL
          git remote set-url origin "$BREW_TAP_REPO"
          echo "Updated remote URL to: $(git remote get-url origin)"
          
          echo "Pushing to branch: $CURRENT_BRANCH"
          if git push origin "$CURRENT_BRANCH"; then
            echo "✓ Successfully pushed to $CURRENT_BRANCH via SSH"
          else
            echo "✗ Failed to push to $CURRENT_BRANCH, trying master..."
            if git push origin master; then
              echo "✓ Successfully pushed to master via SSH"
            else
              echo "✗ Failed to push to both $CURRENT_BRANCH and master"
              echo "Checking git status and remote configuration..."
              git status
              git remote -v
              exit 1
            fi
          fi
          
          echo "✅ Homebrew Tap updated successfully!"
          echo "Users can install with: brew install agbcloud@dev-$TIMESTAMP"

      - id: send-notification
        name: 发送通知
        run: |
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          echo "🎉 AgbCloud CLI 测试包构建完成！
          
          📦 版本: $VERSION
          🕒 时间戳: $TIMESTAMP
          📝 Git 提交: $(git rev-parse --short HEAD)
          
          🍺 安装命令:
          brew install agbcloud@dev-$TIMESTAMP" 