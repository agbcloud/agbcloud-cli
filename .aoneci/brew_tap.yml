# AgbCloud CLI Homebrew Tap 测试包分发流水线
name: AgbCloud CLI Test Package Distribution

# 自动触发条件
triggers:
  push:
    branches:
      - master
      - main

# 全局变量
variables:
  BINARY_NAME: agbcloud
  OSS_BUCKET: agbcloud-internal
  OSS_ENDPOINT: oss-cn-hangzhou.aliyuncs.com
  BREW_TAP_REPO: git@gitlab.alibaba-inc.com:InnoArchClub/homebrew-agbcloud.git

# 流水线作业定义
jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: 2-8Gi
    timeout: 15m
    steps:
      - uses: checkout
      - uses: setup-env
        inputs:
          go-version: "1.23.2"
          go-mod-cache: true
          go-cache: false
      
      - id: install-lint-dependencies
        name: 安装代码检查依赖
        run: |
          echo "Installing linting dependencies..."
          go mod download
          go mod tidy
          
          # Install golangci-lint for linting
          echo "Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "golangci-lint version: $(golangci-lint --version)"
      
      - id: code-formatting-check
        name: 代码格式检查
        run: |
          echo "Checking code formatting..."
          if ! go fmt ./...; then
            echo "❌ Code formatting check failed"
            echo "Please run 'go fmt ./...' to fix formatting issues"
            exit 1
          fi
          echo "✅ Code formatting check passed"
      
      - id: static-analysis
        name: 静态代码分析
        run: |
          echo "Running static code analysis..."
          export PATH=$PATH:$(go env GOPATH)/bin
          
          if ! golangci-lint run --timeout=5m; then
            echo "❌ Static analysis failed"
            echo "Please fix the linting issues before proceeding"
            exit 1
          fi
          echo "✅ Static analysis passed"

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: 2-8Gi
    timeout: 20m
    needs: [code-quality]
    steps:
      - uses: checkout
      - uses: setup-env
        inputs:
          go-version: "1.23.2"
          go-mod-cache: true
          go-cache: false
      
      - id: install-test-dependencies
        name: 安装测试依赖
        run: |
          echo "Installing test dependencies..."
          go mod download
          go mod tidy
      
      - id: run-unit-tests
        name: 运行单元测试
        run: |
          echo "Running unit tests..."
          
          # Run unit tests with coverage
          if ! make test-unit; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          echo "✅ Unit tests passed"
      
      - id: generate-coverage
        name: 生成覆盖率报告
        run: |
          echo "Generating coverage report..."
          if ! make test-coverage; then
            echo "⚠️ Coverage report generation failed, but continuing..."
          else
            echo "✅ Coverage report generated"
          fi
          
          # Display test summary
          echo ""
          echo "📊 Test Summary:"
          go test -v ./test/unit/... 2>/dev/null | grep -E "(PASS|FAIL|RUN)" | tail -10 || true

  # 构建和部署
  build-and-deploy:
    name: 构建和部署
    runs-on: 4-16Gi
    timeout: 45m
    needs: [code-quality, unit-tests]
    steps:
      - uses: checkout
      - uses: setup-env
        inputs:
          go-version: "1.23.2"
          go-mod-cache: true
          go-cache: false
      
      - id: build-binaries
        name: 构建多平台二进制文件
        run: |
          echo "Building for all platforms..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Building version: $VERSION"
          echo "Git commit: $GIT_COMMIT"
          make build-all
          ls -la bin/

      - id: create-packages
        name: 创建安装包
        run: |
          echo "Creating packages..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          mkdir -p packages
          
          for binary in bin/*; do
            if [[ -f "$binary" ]]; then
              filename=$(basename "$binary")
              platform_arch=${filename#agbcloud-}
              
              temp_dir=$(mktemp -d)
              cp "$binary" "$temp_dir/agbcloud"
              tar -czf "packages/agbcloud-$VERSION-$platform_arch.tar.gz" -C "$temp_dir" agbcloud
              sha256sum "packages/agbcloud-$VERSION-$platform_arch.tar.gz" > "packages/agbcloud-$VERSION-$platform_arch.tar.gz.sha256"
              rm -rf "$temp_dir"
              echo "✓ Created package: agbcloud-$VERSION-$platform_arch.tar.gz"
            fi
          done
          
          ls -la packages/

      - id: upload-to-oss
        name: 上传到 OSS
        run: |
          echo "Uploading packages to OSS..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          
          # 设置 OSS 配置变量
          export OSS_BUCKET="agbcloud-internal"
          export OSS_ENDPOINT="oss-cn-hangzhou.aliyuncs.com"
          
          # 设置 OSS 凭证
          export OSS_ACCESS_KEY_ID="${{secrets.OSS_ACCESS_KEY_ID}}"
          export OSS_ACCESS_KEY_SECRET="${{secrets.OSS_ACCESS_KEY_SECRET}}"
          
          # 调试信息 - 检查凭证长度和前缀（不泄露完整凭证）
          echo "=== OSS Credentials Debug Info ==="
          echo "OSS_ACCESS_KEY_ID length: ${#OSS_ACCESS_KEY_ID}"
          echo "OSS_ACCESS_KEY_SECRET length: ${#OSS_ACCESS_KEY_SECRET}"
          echo "OSS_ACCESS_KEY_ID prefix: ${OSS_ACCESS_KEY_ID:0:8}..."
          echo "OSS_ACCESS_KEY_SECRET prefix: ${OSS_ACCESS_KEY_SECRET:0:8}..."
          echo "OSS_ENDPOINT: $OSS_ENDPOINT"
          echo "OSS_BUCKET: $OSS_BUCKET"
          
          # 检查凭证是否设置
          if [[ -z "$OSS_ACCESS_KEY_ID" ]] || [[ -z "$OSS_ACCESS_KEY_SECRET" ]]; then
            echo "Error: OSS credentials not set in secrets"
            echo "OSS_ACCESS_KEY_ID is empty: $([ -z "$OSS_ACCESS_KEY_ID" ] && echo 'YES' || echo 'NO')"
            echo "OSS_ACCESS_KEY_SECRET is empty: $([ -z "$OSS_ACCESS_KEY_SECRET" ] && echo 'YES' || echo 'NO')"
            exit 1
          fi
          
          # 网络连接测试
          echo "=== Network Connectivity Test ==="
          echo "Testing connectivity to OSS endpoint..."
          if ping -c 3 oss-cn-hangzhou.aliyuncs.com; then
            echo "✓ Ping to OSS endpoint successful"
          else
            echo "⚠ Ping to OSS endpoint failed"
          fi
          
          if curl -I --connect-timeout 10 https://oss-cn-hangzhou.aliyuncs.com; then
            echo "✓ HTTP connection to OSS endpoint successful"
          else
            echo "⚠ HTTP connection to OSS endpoint failed"
          fi
          
          # 安装 ossutil
          if ! command -v ossutil >/dev/null 2>&1; then
            echo "Installing ossutil..."
            curl -L "https://gosspublic.alicdn.com/ossutil/1.7.19/ossutil-v1.7.19-linux-amd64.zip" -o ossutil.zip
            unzip -q ossutil.zip
            
            # 查找正确的ossutil二进制文件
            OSSUTIL_BINARY=$(find . -name "ossutil*" -type f | head -1)
            if [[ -z "$OSSUTIL_BINARY" ]]; then
              echo "Error: Failed to find ossutil binary after extraction"
              exit 1
            fi
            
            chmod +x "$OSSUTIL_BINARY"
            mv "$OSSUTIL_BINARY" /usr/local/bin/ossutil
            rm -f ossutil.zip
            rm -rf ossutil*/
            
            echo "✓ ossutil installed successfully"
          else
            echo "✓ ossutil already installed"
          fi
          
          # 配置并上传
          echo "=== OSS Configuration ==="
          echo "Configuring ossutil with verbose output..."
          
          # 使用详细模式配置ossutil
          if ossutil config --endpoint="$OSS_ENDPOINT" --access-key-id="$OSS_ACCESS_KEY_ID" --access-key-secret="$OSS_ACCESS_KEY_SECRET"; then
            echo "✓ ossutil configuration successful"
          else
            echo "✗ ossutil configuration failed"
            exit 1
          fi
          
          # 验证配置 - 使用详细模式
          echo "=== OSS Connection Test ==="
          echo "Testing connection to bucket: $OSS_BUCKET"
          
          if ossutil ls oss://$OSS_BUCKET/; then
            echo "✓ Successfully connected to OSS bucket: $OSS_BUCKET"
          else
            echo "✗ Failed to connect to OSS bucket: $OSS_BUCKET"
            echo "Attempting to diagnose the issue..."
            
            # 尝试更详细的诊断
            echo "Testing basic OSS connectivity..."
            ossutil ls oss:// || true
            
            echo "Testing bucket existence with stat command..."
            ossutil stat oss://$OSS_BUCKET/ || true
            
            echo "Checking ossutil configuration..."
            ossutil config || true
            
            exit 1
          fi
          
          echo "OSS configuration successful, uploading packages..."
          
          for package in packages/*.tar.gz packages/*.sha256; do
            if [[ -f "$package" ]]; then
              filename=$(basename "$package")
              echo "Uploading $filename..."
              
              if ossutil cp "$package" "oss://$OSS_BUCKET/agbcloud/releases/$filename" --force; then
                if ossutil set-acl "oss://$OSS_BUCKET/agbcloud/releases/$filename" public-read; then
                  echo "✓ Uploaded and set public: $filename"
                else
                  echo "⚠ Uploaded but failed to set ACL: $filename"
                fi
              else
                echo "✗ Failed to upload: $filename"
                exit 1
              fi
            fi
          done

      - id: update-homebrew-tap
        name: 更新 Homebrew Tap
        run: |
          echo "Updating Homebrew Tap..."
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export TIMESTAMP=$(date +%Y%m%d-%H%M)
          export SANITIZED_TIMESTAMP=$(echo "$TIMESTAMP" | tr -d '-')
          
          echo "Setting up SSH key..."
          # 设置SSH密钥
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 检查SSH私钥是否设置
          if [[ -z "${{secrets.AONE_CI_DEPLOY_KEY}}" ]]; then
            echo "Error: AONE_CI_DEPLOY_KEY not set in secrets"
            exit 1
          fi
          
          # 将私钥写入文件
          echo "${{secrets.AONE_CI_DEPLOY_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 检查私钥格式并转换如果需要
          if head -1 ~/.ssh/id_rsa | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            # 转换为PEM格式（不设置密码）
            ssh-keygen -p -m PEM -f ~/.ssh/id_rsa -P "" -N "" > /dev/null 2>&1 || true
          fi
          
          # 创建SSH配置文件
          cat > ~/.ssh/config << EOF
          Host gitlab.alibaba-inc.com
              HostName gitlab.alibaba-inc.com
              User git
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # 启动ssh-agent并添加密钥
          eval "$(ssh-agent -s)" > /dev/null
          ssh-add ~/.ssh/id_rsa > /dev/null 2>&1
          

          
          # 设置 Homebrew Tap 仓库地址
          export BREW_TAP_REPO="git@gitlab.alibaba-inc.com:InnoArchClub/homebrew-agbcloud.git"
          
          # 克隆 tap 仓库
          echo "Cloning Homebrew Tap repository..."
          
          if git clone "$BREW_TAP_REPO" homebrew-agbcloud > /dev/null 2>&1; then
            echo "✓ Successfully cloned tap repository"
          else
            echo "✗ Failed to clone tap repository"
            exit 1
          fi
          
          cd homebrew-agbcloud
          
          # 配置 git
          git config user.name "Aone CICD Bot"
          git config user.email "cicd@alibaba-inc.com"
          
          # 获取 SHA256 值
          get_sha256() {
              local platform_arch=$1
              local sha256_file="../packages/agbcloud-$VERSION-$platform_arch.tar.gz.sha256"
              if [[ -f "$sha256_file" ]]; then
                  cut -d' ' -f1 "$sha256_file"
              else
                  echo "MISSING_SHA256"
              fi
          }
          
          DARWIN_AMD64_SHA256=$(get_sha256 "darwin-amd64")
          DARWIN_ARM64_SHA256=$(get_sha256 "darwin-arm64")
          LINUX_AMD64_SHA256=$(get_sha256 "linux-amd64")
          LINUX_ARM64_SHA256=$(get_sha256 "linux-arm64")
          
          # 生成 Formula
          echo "Creating Formula file..."
          mkdir -p Formula
          
          # 使用简化的命名方式，避免@符号问题
          FORMULA_FILE="Formula/agbcloud-dev-$TIMESTAMP.rb"
          FORMULA_CLASS_NAME="AgbcloudDev${SANITIZED_TIMESTAMP}"
          
          cat > "$FORMULA_FILE" << EOF
          class ${FORMULA_CLASS_NAME} < Formula
            desc "AgbCloud CLI - Test Build $TIMESTAMP"
            homepage "https://alibaba-inc.com/agbcloud"
            version "$VERSION"
          
            if OS.mac?
              if Hardware::CPU.arm?
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-darwin-arm64.tar.gz"
                sha256 "$DARWIN_ARM64_SHA256"
              else
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-darwin-amd64.tar.gz"
                sha256 "$DARWIN_AMD64_SHA256"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-linux-arm64.tar.gz"
                sha256 "$LINUX_ARM64_SHA256"
              else
                url "https://agbcloud-internal.oss-cn-hangzhou.aliyuncs.com/agbcloud/releases/agbcloud-$VERSION-linux-amd64.tar.gz"
                sha256 "$LINUX_AMD64_SHA256"
              end
            end
          
            def install
              bin.install "agbcloud"
            end
          
            test do
              system "#{bin}/agbcloud", "version"
            end
          
            def caveats
              <<~EOS
                This is a test build of AgbCloud CLI.
                Build timestamp: $TIMESTAMP
                Git commit: $GIT_COMMIT
                
                🚀 Quick Start:
                  agbcloud version        # Check version
                  agbcloud --help         # Show help
                  agbcloud login          # Login to AgbCloud
                
                📝 Note: The executable is named 'agbcloud', not 'agbcloud-dev-${TIMESTAMP}'
                
                🔄 To switch between versions:
                  brew unlink agbcloud-dev-${TIMESTAMP}
                  brew link agbcloud-dev-other-version
              EOS
            end
          end
          EOF
          
          # 提交更改
          echo "Committing and pushing changes..."
          git add "$FORMULA_FILE"
          git commit -m "Add test build agbcloud-dev-$TIMESTAMP

          Version: $VERSION
          Git commit: $GIT_COMMIT
          Build timestamp: $TIMESTAMP" > /dev/null
          
          # 推送更改
          CURRENT_BRANCH=$(git branch --show-current)
          if git push origin "$CURRENT_BRANCH" > /dev/null 2>&1; then
            echo "✓ Successfully pushed to $CURRENT_BRANCH"
          else
            echo "✗ Failed to push changes"
            exit 1
          fi
          
          echo "✅ Homebrew Tap updated successfully!"
          echo ""
          echo "📋 Installation Instructions:"
          echo "1. Add tap (only needed once):"
          echo "   brew tap InnoArchClub/agbcloud https://gitlab.alibaba-inc.com/InnoArchClub/homebrew-agbcloud.git"
          echo ""
          echo "2. Update tap information:"
          echo "   brew update"
          echo ""
          echo "3. Install this version:"
          echo "   brew install agbcloud-dev-$TIMESTAMP"
          echo ""
          echo "4. Force link to latest version (recommended):"
          echo "   brew link --overwrite agbcloud-dev-$TIMESTAMP"
          echo ""
          echo "5. Use the CLI (executable name is 'agbcloud'):"
          echo "   agbcloud version"
          echo "   agbcloud --help"
          echo ""
          echo "🔄 Version Switching:"
          echo "   # Switch to this test version (force overwrite):"
          echo "   brew link --overwrite agbcloud-dev-$TIMESTAMP"
          echo ""
          echo "   # Or manual unlink then link:"
          echo "   brew unlink agbcloud agbcloud-dev-* 2>/dev/null || true"
          echo "   brew link agbcloud-dev-$TIMESTAMP"
          echo ""
          echo "   # Switch back to official version:"
          echo "   brew unlink agbcloud-dev-* 2>/dev/null || true"
          echo "   brew link --overwrite agbcloud"

      - id: send-notification
        name: 发送通知
        run: |
          export VERSION="dev-$(date +%Y%m%d-%H%M)"
          export TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          echo "🎉 AgbCloud CLI 测试包构建完成！
          
          📦 版本: $VERSION
          🕒 时间戳: $TIMESTAMP
          📝 Git 提交: $(git rev-parse --short HEAD)
          ✅ 质量检查: 代码格式 ✓ 静态分析 ✓ 单元测试 ✓"
          
          🍺 安装命令:
          1. 添加 tap (仅首次需要):
             brew tap InnoArchClub/agbcloud https://gitlab.alibaba-inc.com/InnoArchClub/homebrew-agbcloud.git
          
          2. 更新 tap 信息:
             brew update
          
          3. 安装此版本:
             brew install agbcloud-dev-$TIMESTAMP
          
          4. 强制链接到最新版本 (推荐):
             brew link --overwrite agbcloud-dev-$TIMESTAMP
          
          5. 使用命令:
             agbcloud version
             agbcloud --help
          
          🔄 版本切换:
          # 切换到此测试版本 (强制覆盖)
          brew link --overwrite agbcloud-dev-$TIMESTAMP
          
          # 或者手动解除链接后再链接
          brew unlink agbcloud agbcloud-dev-* 2>/dev/null || true
          brew link agbcloud-dev-$TIMESTAMP
          
          # 切换到正式版本 (如果已安装)
          brew unlink agbcloud-dev-* 2>/dev/null || true
          brew link --overwrite agbcloud
          
          # 查看已安装的版本
          brew list | grep agbcloud
          
          # 卸载测试版本
          brew uninstall agbcloud-dev-$TIMESTAMP" 